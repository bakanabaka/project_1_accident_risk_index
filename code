import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score,r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error
from sklearn.metrics import zero_one_loss
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import KFold,StratifiedKFold,LeaveOneOut
import statistics as st
df = pd.read_csv(r'C:\Users\shrav\Dropbox\My PC (DESKTOP-689769P)\Downloads\Accident_Risk_Index\Accident_Risk_Index\uk_accident_dataset.csv')
print(df.head())
x =df.iloc[:,:-1]
y = df.iloc[:,-1]
#display all elements except first two
print(df[2:])
print(df.tail())

#staistics
print(df.describe())
#to access indivisual elements of describe
print(df.count())
print(df.sum())
print(df.max(),df.mean())

#cleaning data
print(df.fillna(0))#replaces all NaN from data frame with zero
print(df.dropna())#drop all rows that have NaN value
print(df.replace('no',''))#replace all no values with empty string

#filtering and sorting
print(df.sort_values(by=['Time','Date'],ascending=False))#sort data first by Time then data
print(df.query('Police_force>40'))
print(df[df['Date']>23 & df['Time']>6])
#todrop values
to_drop = [
    'Police_force',
    'postcode',
]
print(df.drop(to_drop,inplace=True,axis=1))
#changing index of data field
df.set_index('postcode', inplace=True)
#changing names of columns
new_names = {
    'Unnamed','unambiguos',
}
#upto all names
print(df.rename(columns=new_names,inplace=True))


#then train test split the data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.75)
def gen_cls_matrix(y_test,ypred):
    cm = confusion_matrix(y_test,ypred)
    cl = classification_report(y_test,ypred)
    print(cm)
    print(cl)
def score(model):
    print('training score',model.score(x_train,y_train))
    print('testing score',model.score(x_test,y_test))
